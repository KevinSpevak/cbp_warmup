;;;; Usage: run as lisp script from command line
;;;; e.g. > sbcl --script test.lisp

(load "models.lisp")
(load "sentences.lisp")
(load "solvers.lisp")

(defun print-result (output)
  (if output
      (print-model output)
      (print "Unsatisfiable")))

(print "---Results for enum-sat (brute force)---")
(defvar sent '((P Q) (~P)))
(print "sentence: ")
(print sent)
(print "result:")
(print-result (enum-sat sent))
(print "")

(setq sent '((P Q) (~P) (~Q)))
(print "sentence: ")
(print sent)
(print "result:")
(print-result (enum-sat sent))
(print "")

(print "---Results for dpll-sat ---")
(setq sent '((P Q) (~P)))
(print "sentence: ")
(print sent)
(print "result:")
(print-result (dpll-sat sent))
(print "")

(setq sent '((P Q) (~P) (~Q)))
(print "sentence: ")
(print sent)
(print "result:")
(print-result (dpll-sat sent))
(print "")

(print "--- enum-sat/dpll-sat performance comparison")
(print "Intentionally Easy sentence:")
(defvar long-easy '((A) (B ~G) (~A C) (A ~B C ~D E ~F) (D) (~B ~C F) (~G ~H I) (~G ~I ~A) (H) (~J ~G ~I) (~G D ~B J ~K) (~K ~J) (L ~M ~K) (~M ~L)))
(print long-easy)
(print "enum-sat:")
(time (enum-sat long-easy))
(print "dpll-sat:")
(time (dpll-sat long-easy))
(print "Random Sentence with 15 symbols and 15 3-literal clauses:")
(defvar rand-cnf-1 (rand-cnf 3 10 15))
(print "enum-sat:")
(time (enum-sat rand-cnf-1))
(print "dpll-sat:")
(time (dpll-sat rand-cnf-1))
(print "Random Sentence with 15 symbols and 60 3-literal clauses:")
(defvar rand-cnf-2 (rand-cnf 3 60 15))
(print "enum-sat:")
(time (enum-sat rand-cnf-2))
(print "dpll-sat:")
(time (dpll-sat rand-cnf-2))
(print "Random Sentence with 15 symbols and 100 3-literal clauses:")
(defvar rand-cnf-3 (rand-cnf 3 100 15))
(print "enum-sat:")
(time (enum-sat rand-cnf-3))
(print "dpll-sat:")
(time (dpll-sat rand-cnf-3))

(print "---Results for horn-sat ---")
(setq sent '((P Q) (~P)))
(print "sentence: ")
(print sent)
(print "result:")
(print-result (horn-sat sent))
(print "")

(setq sent '((P Q) (~P) (~Q)))
(print "sentence: ")
(print sent)
(print "result:")
(print-result (horn-sat sent))
(print "")

(print "--- enum-sat/dpll-sat/horn-sat performance comparison")
(print "Random Horn Sentence with 15 symbols and 100 clauses with up to 10 literals each")
(defvar horn-cnf-1 (rand-horn-cnf 8 100 15))
(print "enum-sat:")
(time (enum-sat horn-cnf-1))
(print "dpll-sat:")
(time (dpll-sat horn-cnf-1))
(print "horn-sat:")
(time (horn-sat horn-cnf-1))

(print "Random Horn Sentence with 200 symbols and 300 clauses with up to 100 literals each")
(defvar horn-cnf-2 (rand-horn-cnf 100 300 200))
(print "dpll-sat:")
(time (dpll-sat horn-cnf-2))
(print "horn-sat:")
(time (horn-sat horn-cnf-2))
